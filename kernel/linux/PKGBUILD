pkgbase=linux
pkgver=6.1.14
_branch=6.x
pkgrel=9
pkgdesc='Linux lts AM4 with Vega Graphic'
url="http://www.localhost.lost"
arch=(x86_64)
license=(GPL2)
makedepends=(
	bc cpio kmod libelf perl tar xz
)
options=('!strip')
_srcname="linux-${pkgver}"
source=("https://cdn.kernel.org/pub/linux/kernel/v${_branch}/linux-${pkgver}.tar."{xz,sign}
	"config"
	"0001-ZEN-Add-sysctl-and-CONFIG-to-disallow-unprivileged-CLONE_NEWUSER.patch"
	"0003-more-uarches-for-kernel-5.15-5.16.patch"
)
validpgpkeys=(
	'ABAF11C65A2970B130ABE3C479BE3E4300411886' # Linux Torvalds
	'647F28654894E3BD457199BE38DBBDC86092693E' # Greg Kroah-Hartman
)
sha256sums=('48841319f4b0077da15e4176e624032d8332d961ee660e1b85e1ce73ded17a67'
            'SKIP'
            'b919b2ea5fb9f02aab2ddd179549525047e57ec6155d9cf2c4815a3957ad2452'
            'bdc360f1eb76f87b66c4eed279c93bd04f151ea63fa7b116ad5c35c12e673653'
            '2893ca70c1812f98cbf1ea1ed0abac7b70c91b21f07c4f6c1816a769bcc34909')
                        
export KBUILD_BUILD_HOST=${KBUILD_BUILD_HOST:-archlinux}
export KBUILD_BUILD_USER=${KBUILD_BUILD_USER:-makepkg}
export KBUILD_BUILD_TIMESTAMP=${KBUILD_BUILD_TIMESTAMP:-$(date -Ru${SOURCE_DATE_EPOCH:+d @$SOURCE_DATE_EPOCH})}

prepare() {
	cd linux-${pkgver}
	echo "Setting version..."
	scripts/setlocalversion --save-scmversion
	echo "-$pkgrel" > localversion.10-pkgrel
	echo "${pkgbase#linux}" > localversion.20-pkgname
	for f in ../*.patch; do patch -p1 < $f; done
	cp ../config .config
	make oldconfig
	make -s kernelrelease > version
}
build() { 
	cd $_srcname
	make all
}
_package() {
	pkgdesc="The Linux kernel"
	depends=(coreutils kmod initramfs)
	provides=(WIREGUARD-MODULE
	    KSMBD-MODULE
	    NTFS3-MODULE)
	cd $_srcname
	local kernver="$(<version)"
	local modulesdir="$pkgdir/usr/lib/modules/$kernver"

	echo "Installing boot image..."
	# systemd expects to find the kernel here to allow hibernation
	# https://github.com/systemd/systemd/commit/edda44605f06a41fb86b7ab8128dcf99161d2344
	install -Dm644 "$(make -s image_name)" "$modulesdir/vmlinuz"

	# Used by mkinitcpio to name the kernel
	echo "$pkgbase" | install -Dm644 /dev/stdin "$modulesdir/pkgbase"

	echo "Installing modules..."
	make INSTALL_MOD_PATH="$pkgdir/usr" INSTALL_MOD_STRIP=1 \
	DEPMOD=/doesnt/exist modules_install  # Suppress depmod

	# remove build and source links
	rm "$modulesdir"/{source,build}
}

_package-headers() {
	pkgdesc="Headers and scripts for building modules for the $pkgdesc kernel"
	depends=(pahole)

	cd $_srcname
	local builddir="$pkgdir/usr/lib/modules/$(<version)/build"

	echo "Installing build files..."
	install -Dt "$builddir" -m644 .config Makefile Module.symvers System.map \
	localversion.* version vmlinux
	install -Dt "$builddir/kernel" -m644 kernel/Makefile
	install -Dt "$builddir/arch/x86" -m644 arch/x86/Makefile
	cp -t "$builddir" -a scripts

	# required when STACK_VALIDATION is enabled
	install -Dt "$builddir/tools/objtool" tools/objtool/objtool

	# required when DEBUG_INFO_BTF_MODULES is enabled
#	install -Dt "$builddir/tools/bpf/resolve_btfids" tools/bpf/resolve_btfids/resolve_btfids

	echo "Installing headers..."
	cp -t "$builddir" -a include
	cp -t "$builddir/arch/x86" -a arch/x86/include
	install -Dt "$builddir/arch/x86/kernel" -m644 arch/x86/kernel/asm-offsets.s

	install -Dt "$builddir/drivers/md" -m644 drivers/md/*.h
#	install -Dt "$builddir/net/mac80211" -m644 net/mac80211/*.h

	# https://bugs.archlinux.org/task/13146
	install -Dt "$builddir/drivers/media/i2c" -m644 drivers/media/i2c/msp3400-driver.h

	# https://bugs.archlinux.org/task/20402
#	install -Dt "$builddir/drivers/media/usb/dvb-usb" -m644 drivers/media/usb/dvb-usb/*.h
#	install -Dt "$builddir/drivers/media/dvb-frontends" -m644 drivers/media/dvb-frontends/*.h
#	install -Dt "$builddir/drivers/media/tuners" -m644 drivers/media/tuners/*.h

	# https://bugs.archlinux.org/task/71392
	install -Dt "$builddir/drivers/iio/common/hid-sensors" -m644 drivers/iio/common/hid-sensors/*.h

	echo "Installing KConfig files..."
	find . -name 'Kconfig*' -exec install -Dm644 {} "$builddir/{}" \;

	echo "Removing unneeded architectures..."
	local arch
	for arch in "$builddir"/arch/*/; do
	[[ $arch = */x86/ ]] && continue
	echo "Removing $(basename "$arch")"
	rm -r "$arch"
	done

	echo "Removing documentation..."
	rm -r "$builddir/Documentation"

	echo "Removing broken symlinks..."
	find -L "$builddir" -type l -printf 'Removing %P\n' -delete

	echo "Removing loose objects..."
	find "$builddir" -type f -name '*.o' -printf 'Removing %P\n' -delete

	echo "Stripping build tools..."
	local file
	while read -rd '' file; do
	case "$(file -bi "$file")" in
	application/x-sharedlib\;*)      # Libraries (.so)
	strip -v $STRIP_SHARED "$file" ;;
	application/x-archive\;*)        # Libraries (.a)
	strip -v $STRIP_STATIC "$file" ;;
	application/x-executable\;*)     # Binaries
	strip -v $STRIP_BINARIES "$file" ;;
	application/x-pie-executable\;*) # Relocatable binaries
	strip -v $STRIP_SHARED "$file" ;;
	esac
	done < <(find "$builddir" -type f -perm -u+x ! -name vmlinux -print0)

	echo "Stripping vmlinux..."
	strip -v $STRIP_STATIC "$builddir/vmlinux"

	echo "Adding symlink..."
	mkdir -p "$pkgdir/usr/src"
	ln -sr "$builddir" "$pkgdir/usr/src/$pkgbase"
}

pkgname=("$pkgbase" "$pkgbase-headers")
for _p in "${pkgname[@]}"; do
  eval "package_$_p() {
    $(declare -f "_package${_p#$pkgbase}")
    _package${_p#$pkgbase}
  }"
done
